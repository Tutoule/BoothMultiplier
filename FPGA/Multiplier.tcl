#*****************************************************************************************
# Vivado (TM) v2020.2 (64-bit)
#
# Multiplier.tcl: Tcl script for re-creating project 'Multiplier'
#
# Generated by Vivado on Fri Sep 30 10:55:02 +0800 2022
# IP Build 3064653 on Wed Nov 18 14:17:31 MST 2020
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (Multiplier.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "./src/ip/clk_wiz_0/clk_wiz_0.xci"
#    "./src/imports/verilog/Multiplier34.v"
#    "./src/imports/verilog/Multiplier36.v"
#    "./src/imports/verilog/Multiplier40.v"
#    "./src/imports/verilog/Multiplier47.v"
#    "./src/imports/verilog/Multiplier48.v"
#    "./src/imports/verilog/Multiplier50.v"
#    "./src/imports/verilog/Multiplier60.v"
#    "./src/imports/verilog/Multiplier63.v"
#    "./src/imports/verilog/Multiplier9.v"
#    "./src/imports/verilog/Multiplier61.v"
#    "./src/imports/verilog/Multiplier21.v"
#    "./src/imports/verilog/Multiplier42.v"
#    "./src/imports/verilog/Multiplier23.v"
#    "./src/imports/verilog/Multiplier44.v"
#    "./src/imports/verilog/Multiplier25.v"
#    "./src/imports/verilog/Multiplier46.v"
#    "./src/imports/verilog/Multiplier27.v"
#    "./src/imports/verilog/Multiplier29.v"
#    "./src/imports/verilog/Multiplier3.v"
#    "./src/imports/verilog/Multiplier1.v"
#    "./src/imports/verilog/Multiplier7.v"
#    "./src/imports/verilog/Multiplier10.v"
#    "./src/imports/verilog/Multiplier52.v"
#    "./src/imports/verilog/Multiplier5.v"
#    "./src/imports/verilog/Multiplier31.v"
#    "./src/imports/verilog/Multiplier54.v"
#    "./src/imports/verilog/Multiplier14.v"
#    "./src/imports/verilog/Multiplier33.v"
#    "./src/imports/verilog/Multiplier56.v"
#    "./src/imports/verilog/Multiplier12.v"
#    "./src/imports/verilog/Multiplier35.v"
#    "./src/imports/verilog/Multiplier58.v"
#    "./src/imports/verilog/Multiplier18.v"
#    "./src/imports/verilog/Multiplier37.v"
#    "./src/imports/verilog/Multiplier16.v"
#    "./src/imports/verilog/Multiplier39.v"
#    "./src/imports/verilog/Multiplier41.v"
#    "./src/imports/verilog/Multiplier20.v"
#    "./src/imports/verilog/Multiplier43.v"
#    "./src/imports/verilog/Multiplier22.v"
#    "./src/imports/verilog/Multiplier45.v"
#    "./src/imports/verilog/Multiplier24.v"
#    "./src/imports/verilog/Multiplier62.v"
#    "./src/imports/verilog/Multiplier26.v"
#    "./src/imports/verilog/Multiplier49.v"
#    "./src/imports/verilog/Multiplier28.v"
#    "./src/imports/verilog/Multiplier2.v"
#    "./src/imports/verilog/Multiplier0.v"
#    "./src/imports/verilog/Multiplier30.v"
#    "./src/imports/verilog/Multiplier51.v"
#    "./src/imports/verilog/Multiplier6.v"
#    "./src/imports/verilog/Multiplier32.v"
#    "./src/imports/verilog/Multiplier53.v"
#    "./src/imports/verilog/Multiplier4.v"
#    "./src/imports/verilog/Multiplier13.v"
#    "./src/imports/verilog/Multiplier55.v"
#    "./src/imports/verilog/Multiplier11.v"
#    "./src/imports/verilog/Multiplier57.v"
#    "./src/imports/verilog/Multiplier8.v"
#    "./src/imports/verilog/Multiplier17.v"
#    "./src/imports/verilog/Multiplier38.v"
#    "./src/imports/verilog/Multiplier59.v"
#    "./src/imports/verilog/Multiplier15.v"
#    "./src/imports/verilog/Multiplier19.v"
#    "C:/ChiselProject/BoothMultiplier/FPGA/Multiplier/Multiplier.srcs/constrs_1/imports/src/VC707_rev_2.0.ucf.xdc"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
   "./src/ip/clk_wiz_0/clk_wiz_0.xci" \
   "./src/verilog/Multiplier34.v" \
   "./src/verilog/Multiplier36.v" \
   "./src/verilog/Multiplier40.v" \
   "./src/verilog/Multiplier47.v" \
   "./src/verilog/Multiplier48.v" \
   "./src/verilog/Multiplier50.v" \
   "./src/verilog/Multiplier60.v" \
   "./src/verilog/Multiplier63.v" \
   "./src/verilog/Multiplier9.v" \
   "./src/verilog/Multiplier61.v" \
   "./src/verilog/Multiplier21.v" \
   "./src/verilog/Multiplier42.v" \
   "./src/verilog/Multiplier23.v" \
   "./src/verilog/Multiplier44.v" \
   "./src/verilog/Multiplier25.v" \
   "./src/verilog/Multiplier46.v" \
   "./src/verilog/Multiplier27.v" \
   "./src/verilog/Multiplier29.v" \
   "./src/verilog/Multiplier3.v" \
   "./src/verilog/Multiplier1.v" \
   "./src/verilog/Multiplier7.v" \
   "./src/verilog/Multiplier10.v" \
   "./src/verilog/Multiplier52.v" \
   "./src/verilog/Multiplier5.v" \
   "./src/verilog/Multiplier31.v" \
   "./src/verilog/Multiplier54.v" \
   "./src/verilog/Multiplier14.v" \
   "./src/verilog/Multiplier33.v" \
   "./src/verilog/Multiplier56.v" \
   "./src/verilog/Multiplier12.v" \
   "./src/verilog/Multiplier35.v" \
   "./src/verilog/Multiplier58.v" \
   "./src/verilog/Multiplier18.v" \
   "./src/verilog/Multiplier37.v" \
   "./src/verilog/Multiplier16.v" \
   "./src/verilog/Multiplier39.v" \
   "./src/verilog/Multiplier41.v" \
   "./src/verilog/Multiplier20.v" \
   "./src/verilog/Multiplier43.v" \
   "./src/verilog/Multiplier22.v" \
   "./src/verilog/Multiplier45.v" \
   "./src/verilog/Multiplier24.v" \
   "./src/verilog/Multiplier62.v" \
   "./src/verilog/Multiplier26.v" \
   "./src/verilog/Multiplier49.v" \
   "./src/verilog/Multiplier28.v" \
   "./src/verilog/Multiplier2.v" \
   "./src/verilog/Multiplier0.v" \
   "./src/verilog/Multiplier30.v" \
   "./src/verilog/Multiplier51.v" \
   "./src/verilog/Multiplier6.v" \
   "./src/verilog/Multiplier32.v" \
   "./src/verilog/Multiplier53.v" \
   "./src/verilog/Multiplier4.v" \
   "./src/verilog/Multiplier13.v" \
   "./src/verilog/Multiplier55.v" \
   "./src/verilog/Multiplier11.v" \
   "./src/verilog/Multiplier57.v" \
   "./src/verilog/Multiplier8.v" \
   "./src/verilog/Multiplier17.v" \
   "./src/verilog/Multiplier38.v" \
   "./src/verilog/Multiplier59.v" \
   "./src/verilog/Multiplier15.v" \
   "./src/verilog/Multiplier19.v" \
   "./src/VC707_rev_2.0.ucf.xdc" \
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "Multiplier"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "Multiplier.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/../Multiplier"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xc7vx485tffg1761-2

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip.user_files_dir" -value "D:/XilinxProject/${_xil_proj_name_}/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "D:/XilinxProject/${_xil_proj_name_}/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "part" -value "xc7vx485tffg1761-2" -objects $obj
set_property -name "sim.central_dir" -value "D:/XilinxProject/${_xil_proj_name_}/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "2" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "2" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "2" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "2" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "2" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xcelium_export_sim" -value "2" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "2" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/src/ip/clk_wiz_0/clk_wiz_0.xci"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier34.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier36.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier40.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier47.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier48.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier50.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier60.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier63.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier9.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier61.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier21.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier42.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier23.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier44.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier25.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier46.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier27.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier29.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier3.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier1.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier7.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier10.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier52.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier5.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier31.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier54.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier14.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier33.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier56.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier12.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier35.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier58.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier18.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier37.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier16.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier39.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier41.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier20.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier43.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier22.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier45.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier24.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier62.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier26.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier49.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier28.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier2.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier0.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier30.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier51.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier6.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier32.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier53.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier4.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier13.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier55.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier11.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier57.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier8.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier17.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier38.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier59.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier15.v"]\
 [file normalize "${origin_dir}/src/verilog/Multiplier19.v"]\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "clk_wiz_0/clk_wiz_0.xci"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "generate_files_for_reference" -value "0" -objects $file_obj
set_property -name "registered_with_manager" -value "1" -objects $file_obj
if { ![get_property "is_locked" $file_obj] } {
  set_property -name "synth_checkpoint_mode" -value "Singular" -objects $file_obj
}


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "Multiplier0" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize ${origin_dir}/src/VC707_rev_2.0.ucf.xdc]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "src/VC707_rev_2.0.ucf.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property -name "target_part" -value "xc7vx485tffg1761-2" -objects $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "hbs.configure_design_for_hier_access" -value "1" -objects $obj
set_property -name "top" -value "Multiplier" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7vx485tffg1761-2 -flow {Vivado Synthesis 2020} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2020" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "part" -value "xc7vx485tffg1761-2" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7vx485tffg1761-2 -flow {Vivado Implementation 2020} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2020" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "part" -value "xc7vx485tffg1761-2" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
